/* Generated By:JavaCC: Do not edit this line. parse.java */
package drz.oddb.parse;
import java.util.*;
import drz.oddb.parseStmt.*;

public class parse implements parseConstants {

public static final int OPT_CREATE_ORIGINCLASS    = 1;
public static final int OPT_CREATE_SELECTDEPUTY   = 2;
public static final int OPT_DROP                  = 3;
public static final int OPT_INSERT                = 4;
public static final int OPT_DELETE                = 5;
public static final int OPT_SELECT_DERECTSELECT   = 6;
public static final int OPT_SELECT_INDERECTSELECT = 7;
public static final int OPT_CREATE_UPDATE         = 8;

public static CreateStmt createstmt;
public static CreateSelStmt createselstmt;
public static DropStmt dropstmt;
public static InsertStmt insertstmt;
public static UpdateStmt updatestmt;
public static SelectStmt selectstmt;
public static DeleteStmt deletestmt;
static Queue<String > st= new LinkedList<String>();
public static void main(String args[]) throws ParseException {
    //refresh();
    for(int i=0;i<10;i++) {
      System.out.println(1);
    parse parser = new parse(System.in);
    RawStmt rawstmt=parser.Run();
    System.out.println(rawstmt.toString());
     System.out.println(rawstmt.NodeTag);
  /*  CreateSelStmt css = (CreateSelStmt)rawstmt;
    System.out.println(css.classname);
    System.out.println(css.originname);
    System.out.println(css.relattrs.get(0).attrtype);
    System.out.println(css.relattrs.get(0).attrname);
    System.out.println(css.deputyattrs.get(0).deputyname);
    System.out.println(css.deputyattrs.get(0).switchrule);
    System.out.println(css.deputyattrs.get(1).deputyname);
    System.out.println(css.deputyattrs.get(1).switchrule);*/
   /* CreateStmt ccs=(CreateStmt)rawstmt;
    System.out.println(ccs.classname);
    System.out.println(ccs.cols.get(0).attrname);
    System.out.println(ccs.cols.get(0).attrtype);
    System.out.println(ccs.cols.get(1).attrname);
    System.out.println(ccs.cols.get(1).attrtype);*/
  /*  DropStmt ds =(DropStmt)rawstmt;
    System.out.println(ds.NodeTag);
    System.out.println(ds.classname); */
   /*  InsertStmt iis = (InsertStmt)rawstmt;
     System.out.println(iis.NodeTag);
     System.out.println(iis.classname);
     printlist(iis.attrnames);
     printlist(iis.attrvalues); */
     /*UpdateStmt uus = (UpdateStmt)rawstmt;
     System.out.println(uus.NodeTag);
     System.out.println(uus.classname);
     printlist(uus.attrs);
     printlist(uus.values);
    System.out.println(uus.whereclause);*/
        }
     }

     public static void printlist(ArrayList<String> ls) {
       for(int i=0;i<ls.size();i++)
                System.out.print(ls.get(i)+"  ");
     }

  final public RawStmt Run() throws ParseException {
    trace_call("Run");
    try {
  RawStmt rs;
      rs = sql();
    System.out.println(1);
    {if (true) return rs;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("Run");
    }
  }

  final public RawStmt sql() throws ParseException {
    trace_call("sql");
    try {
  RawStmt rs;
  CreateStmt cs;
  DropStmt ds;
  InsertStmt is;
  UpdateStmt us;
  SelectStmt ss;
  DeleteStmt des;
      if (jj_2_1(3)) {
        cs = create();
                  {if (true) return cs;}
      } else if (jj_2_2(3)) {
        ds = drop();
                {if (true) return ds;}
      } else if (jj_2_3(3)) {
        is = insert();
                  {if (true) return is;}
      } else if (jj_2_4(3)) {
        des = delete();
                   {if (true) return des;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("sql");
    }
  }

  final public CreateStmt create() throws ParseException {
    trace_call("create");
    try {
    String create_s;
    createstmt = new CreateStmt();
    createselstmt = new CreateSelStmt();
        int count;
      if (jj_2_5(3)) {
        jj_consume_token(CREATE);
        originclass();
        jj_consume_token(SEMICOLON);
    createstmt.NodeTag="CREATEORIGIN";
    {if (true) return createstmt;}
      } else if (jj_2_6(3)) {
        jj_consume_token(CREATE);
        selectdeputy1();
        jj_consume_token(SEMICOLON);
      createselstmt.NodeTag="CREATEDEPUTY";
      {if (true) return createselstmt;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("create");
    }
  }

  final public void relattrs() throws ParseException {
    trace_call("relattrs");
    try {
  String cln;
  RelAttr rl=new RelAttr();
  String attr_s;
  String attrtype_s;
      cln = classname();
                      createselstmt.classname=cln;
      jj_consume_token(LEFT_BRACKET);
      attr_s = attr();
                     rl=new RelAttr(); rl.attrname=attr_s;
      attrtype_s = attrtype();
                             rl.attrtype=attrtype_s; createselstmt.relattrs.add(rl);
      label_1:
      while (true) {
        if (jj_2_7(3)) {
          ;
        } else {
          break label_1;
        }
        jj_consume_token(COMMA);
        attr_s = attr();
                              rl=new RelAttr(); rl.attrname=attr_s;
        attrtype_s = attrtype();
                                                                                                rl.attrtype=attrtype_s; createselstmt.relattrs.add(rl);
      }
      jj_consume_token(RIGHT_BRACKET);
     {if (true) return;}
    } finally {
      trace_return("relattrs");
    }
  }

  final public void originclass() throws ParseException {
    trace_call("originclass");
    try {
  String cln;
  RelAttr rl=new RelAttr();
  String attr_s;
  String attrtype_s;
      jj_consume_token(CLASS);
      cln = classname();
                      createstmt.classname=cln;
      jj_consume_token(LEFT_BRACKET);
      attr_s = attr();
                     rl=new RelAttr(); rl.attrname=attr_s;
      attrtype_s = attrtype();
                             rl.attrtype=attrtype_s; createstmt.cols.add(rl);
      label_2:
      while (true) {
        if (jj_2_8(3)) {
          ;
        } else {
          break label_2;
        }
        jj_consume_token(COMMA);
        attr_s = attr();
                              rl=new RelAttr(); rl.attrname=attr_s;
        attrtype_s = attrtype();
                                                                                                rl.attrtype=attrtype_s; createstmt.cols.add(rl);
      }
      jj_consume_token(RIGHT_BRACKET);
     {if (true) return;}
    } finally {
      trace_return("originclass");
    }
  }

  final public DropStmt drop() throws ParseException {
    trace_call("drop");
    try {
  dropstmt = new DropStmt();
  String cln;
      jj_consume_token(DROP);
      jj_consume_token(CLASS);
      cln = classname();
      jj_consume_token(SEMICOLON);
                                                 dropstmt.NodeTag="DROP"; dropstmt.classname=cln;{if (true) return dropstmt;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("drop");
    }
  }

  final public UpdateStmt update3() throws ParseException {
    trace_call("update3");
    try {
  updatestmt = new UpdateStmt();
  String cln;
      jj_consume_token(UPDATE);
      jj_consume_token(CLASS);
      cln = classname();
      jj_consume_token(SEMICOLON);
                                                   updatestmt.NodeTag="UPDATE"; updatestmt.classname=cln;{if (true) return updatestmt;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("update3");
    }
  }

  final public InsertStmt insert() throws ParseException {
    trace_call("insert");
    try {
  insertstmt = new InsertStmt();
  String cln;
  String vl;
  String vn;
  int i;
      jj_consume_token(INSERT);
      jj_consume_token(INTO);
      cln = classname();
                         insertstmt.NodeTag="INSERT";insertstmt.classname=cln;
      insertjudge();
                     {if (true) return insertstmt;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("insert");
    }
  }

  final public void insertjudge() throws ParseException {
    trace_call("insertjudge");
    try {
      if (jj_2_9(3)) {
        insert2();
        jj_consume_token(SEMICOLON);
      } else if (jj_2_10(3)) {
        insert1();
        jj_consume_token(SEMICOLON);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("insertjudge");
    }
  }

  final public int insert1() throws ParseException {
    trace_call("insert1");
    try {
    String vl;
    String vn;
      jj_consume_token(VALUES);
      jj_consume_token(LEFT_BRACKET);
      vl = value();
                                          insertstmt.attrvalues.add(vl);
      label_3:
      while (true) {
        if (jj_2_11(3)) {
          ;
        } else {
          break label_3;
        }
        jj_consume_token(COMMA);
        vl = value();
                            insertstmt.attrvalues.add(vl);
      }
      jj_consume_token(RIGHT_BRACKET);
                     {if (true) return 1;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("insert1");
    }
  }

  final public int insert2() throws ParseException {
    trace_call("insert2");
    try {
    String vl;
    String vn;
      jj_consume_token(LEFT_BRACKET);
      vn = attr();
                                  insertstmt.attrnames.add(vn);
      label_4:
      while (true) {
        if (jj_2_12(3)) {
          ;
        } else {
          break label_4;
        }
        jj_consume_token(COMMA);
        vn = attr();
                          insertstmt.attrnames.add(vn);
      }
      jj_consume_token(RIGHT_BRACKET);
      jj_consume_token(VALUES);
      jj_consume_token(LEFT_BRACKET);
      vl = value();
                                   insertstmt.attrvalues.add(vl);
      label_5:
      while (true) {
        if (jj_2_13(3)) {
          ;
        } else {
          break label_5;
        }
        jj_consume_token(COMMA);
        vl = value();
                           insertstmt.attrvalues.add(vl);
      }
      jj_consume_token(RIGHT_BRACKET);
                      {if (true) return 2;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("insert2");
    }
  }

  final public UpdateStmt update() throws ParseException {
    trace_call("update");
    try {
    String cln;
        String value_s;
        String attr_s;
        String cond;
        String update_s;
        updatestmt = new UpdateStmt();
      jj_consume_token(UPDATE);
             updatestmt.NodeTag="UPDATE";
      cln = classname();
                      updatestmt.classname=cln;
      jj_consume_token(SET);
           {if (true) return updatestmt;}
      jj_consume_token(SEMICOLON);
                {if (true) return updatestmt;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("update");
    }
  }

  final public UpdateStmt update2() throws ParseException {
    trace_call("update2");
    try {
    String cln;
        String value_s;
        String attr_s;
        String cond;
        String update_s;
        updatestmt = new UpdateStmt();
      jj_consume_token(UPDATE);
             updatestmt.NodeTag="UPDATE";
      cln = classname();
                       updatestmt.classname=cln;
      jj_consume_token(SET);
      attr_s = attr();
                    updatestmt.attrs.add(attr_s);
      jj_consume_token(EQUAL);
      value_s = value();
                      updatestmt.values.add(value_s);
      label_6:
      while (true) {
        if (jj_2_14(3)) {
          ;
        } else {
          break label_6;
        }
        jj_consume_token(COMMA);
        attr_s = attr();
                    updatestmt.attrs.add(attr_s);
        jj_consume_token(EQUAL);
        value_s = value();
                      updatestmt.values.add(value_s);
      }
      jj_consume_token(WHERE);
      cond = condition();
                       updatestmt.whereclause=cond;
      jj_consume_token(SEMICOLON);
               {if (true) return updatestmt;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("update2");
    }
  }

  final public DeleteStmt delete() throws ParseException {
    trace_call("delete");
    try {
  String cln;
  String cond;
  deletestmt=new DeleteStmt();
      jj_consume_token(DELETE);
      jj_consume_token(FROM);
      cln = classname();
                                         deletestmt.NodeTag="DELETE";deletestmt.classname=cln;
      jj_consume_token(WHERE);
      cond = condition();
                                deletestmt.whereclause=cond;
      jj_consume_token(SEMICOLON);
                                                                              {if (true) return deletestmt;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("delete");
    }
  }

  final public String classname() throws ParseException {
    trace_call("classname");
    try {
   Token s;
      s = jj_consume_token(ID);
     {if (true) return s.image;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("classname");
    }
  }

  final public String attrtype() throws ParseException {
    trace_call("attrtype");
    try {
   Token s;
      s = jj_consume_token(ID);
     {if (true) return s.image;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("attrtype");
    }
  }

  final public String attr() throws ParseException {
    trace_call("attr");
    try {
   Token s;
      s = jj_consume_token(ID);
     {if (true) return s.image;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("attr");
    }
  }

  final public String value() throws ParseException {
    trace_call("value");
    try {
        Token s;
      if (jj_2_15(3)) {
        s = jj_consume_token(INT);
               {if (true) return s.image;}
      } else if (jj_2_16(3)) {
        s = jj_consume_token(STRING);
                   {if (true) return s.image;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("value");
    }
  }

  final public String condition() throws ParseException {
    trace_call("condition");
    try {
  Token s;
      s = jj_consume_token(BOOLEXP);
    {if (true) return s.image;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("condition");
    }
  }

  final public String expr() throws ParseException {
    trace_call("expr");
    try {
   Token s;
      s = jj_consume_token(EXPRESSION);
     {if (true) return s.image;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expr");
    }
  }

  final public String expression() throws ParseException {
    trace_call("expression");
    try {
        String s;
      if (jj_2_17(3)) {
        s = expr();
                {if (true) return s;}
      } else if (jj_2_18(3)) {
        s = attr();
                {if (true) return s;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expression");
    }
  }

  final public int selectdeputy1() throws ParseException {
    trace_call("selectdeputy1");
    try {
    String cln;
      jj_consume_token(SELECTDEPUTY);
      cln = classname();
                        createselstmt.classname=cln;
      selectdeputy();
                     {if (true) return 0;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("selectdeputy1");
    }
  }

  final public int selectdeputy() throws ParseException {
    trace_call("selectdeputy");
    try {
        int count;
         String cln;
     RelAttr rl=new RelAttr();
     String attr_s;
     String attrtype_s;
      if (jj_2_20(3)) {
        jj_consume_token(LEFT_BRACKET);
        attr_s = attr();
                      rl=new RelAttr(); rl.attrname=attr_s;
        attrtype_s = attrtype();
                              rl.attrtype=attrtype_s; createselstmt.relattrs.add(rl);
        label_7:
        while (true) {
          if (jj_2_19(3)) {
            ;
          } else {
            break label_7;
          }
          jj_consume_token(COMMA);
          attr_s = attr();
                               rl=new RelAttr(); rl.attrname=attr_s;
          attrtype_s = attrtype();
                                                                                                 rl.attrtype=attrtype_s; createselstmt.relattrs.add(rl);
        }
        jj_consume_token(RIGHT_BRACKET);
        jj_consume_token(SELECT);
        directselect();
                                                {if (true) return 0;}
      } else if (jj_2_21(3)) {
        jj_consume_token(SELECT);
        directselect();
                              {if (true) return 0;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("selectdeputy");
    }
  }

  final public String dattr() throws ParseException {
    trace_call("dattr");
    try {
   Token s;
      s = jj_consume_token(ID);
     {if (true) return s.image;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("dattr");
    }
  }

  final public void directselect() throws ParseException {
    trace_call("directselect");
    try {
    String dattr_s;
        String attr_s;
        String expr_s;
        String value_s = "";
        DeputyAttr deputyattr;
        boolean plus = false;
        String cln;
        String cond;
        int count = 0;
      expr_s = expression();
                            deputyattr=new DeputyAttr(); deputyattr.switchrule=expr_s;
      jj_consume_token(AS);
      dattr_s = dattr();
                       deputyattr.deputyname=dattr_s; createselstmt.deputyattrs.add(deputyattr);
      label_8:
      while (true) {
        if (jj_2_22(3)) {
          ;
        } else {
          break label_8;
        }
        jj_consume_token(COMMA);
        expr_s = expression();
                                     deputyattr=new DeputyAttr(); deputyattr.switchrule=expr_s;
        jj_consume_token(AS);
        dattr_s = dattr();
                           deputyattr.deputyname=dattr_s; createselstmt.deputyattrs.add(deputyattr);
      }
      jj_consume_token(FROM);
      cln = classname();
                       createselstmt.originname=cln;
      jj_consume_token(WHERE);
      cond = condition();
                        createselstmt.whereclause=cond;
    } finally {
      trace_return("directselect");
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(EXPRESSION)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_3R_15()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RIGHT_BRACKET)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(CREATE)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(VALUES)) return true;
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(AS)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(CREATE)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) return true;
    }
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_22()) return true;
    if (jj_scan_token(AS)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(INSERT)) return true;
    if (jj_scan_token(INTO)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(DELETE)) return true;
    if (jj_scan_token(FROM)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_15()) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_scan_token(SELECT)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_3R_15()) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(DROP)) return true;
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_15()) return true;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_15()) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(SELECTDEPUTY)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) return true;
    }
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_15()) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public parseTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[22];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public parse(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public parse(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new parseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public parse(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new parseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public parse(parseTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(parseTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[32];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 32; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 22; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
